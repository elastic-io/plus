// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	xml "encoding/xml"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6601e8cdDecodePlusInternalTypes(in *jlexer.Lexer, out *Version) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Epoch":
			out.Epoch = string(in.String())
		case "Ver":
			out.Ver = string(in.String())
		case "Rel":
			out.Rel = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes(out *jwriter.Writer, in Version) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Epoch\":"
		out.RawString(prefix[1:])
		out.String(string(in.Epoch))
	}
	{
		const prefix string = ",\"Ver\":"
		out.RawString(prefix)
		out.String(string(in.Ver))
	}
	{
		const prefix string = ",\"Rel\":"
		out.RawString(prefix)
		out.String(string(in.Rel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Version) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Version) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Version) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Version) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes1(in *jlexer.Lexer, out *TreeNode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "children":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Children = make(map[string]*TreeNode)
				} else {
					out.Children = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 *TreeNode
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(TreeNode)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					(out.Children)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes1(out *jwriter.Writer, in TreeNode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if len(in.Children) != 0 {
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Children {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if v2Value == nil {
					out.RawString("null")
				} else {
					(*v2Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TreeNode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TreeNode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TreeNode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TreeNode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes1(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes2(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "server":
			out.Server = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "code":
			out.Code = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes2(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix[1:])
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes2(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes3(in *jlexer.Lexer, out *Requests) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int64(in.Int64())
		case "uploads":
			out.Uploads = int64(in.Int64())
		case "downloads":
			out.Downloads = int64(in.Int64())
		case "errors":
			out.Errors = int64(in.Int64())
		case "active":
			out.Active = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes3(out *jwriter.Writer, in Requests) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"uploads\":"
		out.RawString(prefix)
		out.Int64(int64(in.Uploads))
	}
	{
		const prefix string = ",\"downloads\":"
		out.RawString(prefix)
		out.Int64(int64(in.Downloads))
	}
	{
		const prefix string = ",\"errors\":"
		out.RawString(prefix)
		out.Int64(int64(in.Errors))
	}
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix)
		out.Int64(int64(in.Active))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Requests) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Requests) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Requests) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Requests) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes3(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes4(in *jlexer.Lexer, out *RepoTable) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes4(out *jwriter.Writer, in RepoTable) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RepoTable) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RepoTable) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RepoTable) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RepoTable) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes4(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes5(in *jlexer.Lexer, out *RepoStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			(out.Status).UnmarshalEasyJSON(in)
		case "repo":
			out.Repo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes5(out *jwriter.Writer, in RepoStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		out.String(string(in.Repo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RepoStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RepoStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RepoStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RepoStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes5(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes6(in *jlexer.Lexer, out *RepoMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			(out.Status).UnmarshalEasyJSON(in)
		case "repositories":
			if in.IsNull() {
				in.Skip()
				out.Repositories = nil
			} else {
				in.Delim('[')
				if out.Repositories == nil {
					if !in.IsDelim(']') {
						out.Repositories = make([]string, 0, 4)
					} else {
						out.Repositories = []string{}
					}
				} else {
					out.Repositories = (out.Repositories)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Repositories = append(out.Repositories, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tree":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tree = make(map[string]*TreeNode)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 *TreeNode
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(TreeNode)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					(out.Tree)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes6(out *jwriter.Writer, in RepoMeta) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"repositories\":"
		out.RawString(prefix)
		if in.Repositories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Repositories {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"tree\":"
		out.RawString(prefix)
		if in.Tree == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Tree {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				if v7Value == nil {
					out.RawString("null")
				} else {
					(*v7Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RepoMeta) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RepoMeta) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RepoMeta) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RepoMeta) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes6(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes7(in *jlexer.Lexer, out *RepoInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Status":
			(out.Status).UnmarshalEasyJSON(in)
		case "name":
			out.Name = string(in.String())
		case "package_count":
			out.PackageCount = int(in.Int())
		case "rpm_count":
			out.RPMCount = int(in.Int())
		case "deb_count":
			out.DEBCount = int(in.Int())
		case "total_size":
			out.TotalSize = int64(in.Int64())
		case "packages":
			if in.IsNull() {
				in.Skip()
				out.Packages = nil
			} else {
				in.Delim('[')
				if out.Packages == nil {
					if !in.IsDelim(']') {
						out.Packages = make([]PackageInfo, 0, 0)
					} else {
						out.Packages = []PackageInfo{}
					}
				} else {
					out.Packages = (out.Packages)[:0]
				}
				for !in.IsDelim(']') {
					var v8 PackageInfo
					(v8).UnmarshalEasyJSON(in)
					out.Packages = append(out.Packages, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes7(out *jwriter.Writer, in RepoInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Status\":"
		out.RawString(prefix[1:])
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"package_count\":"
		out.RawString(prefix)
		out.Int(int(in.PackageCount))
	}
	{
		const prefix string = ",\"rpm_count\":"
		out.RawString(prefix)
		out.Int(int(in.RPMCount))
	}
	{
		const prefix string = ",\"deb_count\":"
		out.RawString(prefix)
		out.Int(int(in.DEBCount))
	}
	{
		const prefix string = ",\"total_size\":"
		out.RawString(prefix)
		out.Int64(int64(in.TotalSize))
	}
	{
		const prefix string = ",\"packages\":"
		out.RawString(prefix)
		if in.Packages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Packages {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RepoInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RepoInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RepoInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RepoInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes7(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes8(in *jlexer.Lexer, out *ReadyCheck) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "checks":
			(out.Checks).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes8(out *jwriter.Writer, in ReadyCheck) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"checks\":"
		out.RawString(prefix)
		(in.Checks).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReadyCheck) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReadyCheck) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReadyCheck) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReadyCheck) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes8(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes9(in *jlexer.Lexer, out *Performance) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response_time_ms":
			out.ResponseTimeMs = int64(in.Int64())
		case "goroutines":
			out.Goroutines = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes9(out *jwriter.Writer, in Performance) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response_time_ms\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ResponseTimeMs))
	}
	{
		const prefix string = ",\"goroutines\":"
		out.RawString(prefix)
		out.Int(int(in.Goroutines))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Performance) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Performance) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Performance) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Performance) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes9(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes10(in *jlexer.Lexer, out *PackageInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "release":
			out.Release = string(in.String())
		case "arch":
			out.Arch = string(in.String())
		case "size":
			out.Size = int64(in.Int64())
		case "checksum":
			out.Checksum = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes10(out *jwriter.Writer, in PackageInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"release\":"
		out.RawString(prefix)
		out.String(string(in.Release))
	}
	{
		const prefix string = ",\"arch\":"
		out.RawString(prefix)
		out.String(string(in.Arch))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int64(int64(in.Size))
	}
	{
		const prefix string = ",\"checksum\":"
		out.RawString(prefix)
		out.String(string(in.Checksum))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PackageInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PackageInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PackageInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PackageInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes10(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes11(in *jlexer.Lexer, out *PackageChecksum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "filename":
			out.Filename = string(in.String())
		case "sha256":
			out.SHA256 = string(in.String())
		case "repo":
			out.Repo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes11(out *jwriter.Writer, in PackageChecksum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"sha256\":"
		out.RawString(prefix)
		out.String(string(in.SHA256))
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		out.String(string(in.Repo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PackageChecksum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PackageChecksum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PackageChecksum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PackageChecksum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes11(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes12(in *jlexer.Lexer, out *Package) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Arch":
			out.Arch = string(in.String())
		case "Version":
			(out.Version).UnmarshalEasyJSON(in)
		case "Checksum":
			(out.Checksum).UnmarshalEasyJSON(in)
		case "Location":
			(out.Location).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes12(out *jwriter.Writer, in Package) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Arch\":"
		out.RawString(prefix)
		out.String(string(in.Arch))
	}
	{
		const prefix string = ",\"Version\":"
		out.RawString(prefix)
		(in.Version).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Checksum\":"
		out.RawString(prefix)
		(in.Checksum).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Location\":"
		out.RawString(prefix)
		(in.Location).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Package) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Package) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Package) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Package) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes12(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes13(in *jlexer.Lexer, out *Metrics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requests":
			(out.Requests).UnmarshalEasyJSON(in)
		case "performance":
			(out.Performance).UnmarshalEasyJSON(in)
		case "memory":
			(out.Memory).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes13(out *jwriter.Writer, in Metrics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"requests\":"
		out.RawString(prefix[1:])
		(in.Requests).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"performance\":"
		out.RawString(prefix)
		(in.Performance).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"memory\":"
		out.RawString(prefix)
		(in.Memory).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes13(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes14(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "XMLName":
			easyjson6601e8cdDecodeEncodingXml(in, &out.XMLName)
		case "Packages":
			if in.IsNull() {
				in.Skip()
				out.Packages = nil
			} else {
				in.Delim('[')
				if out.Packages == nil {
					if !in.IsDelim(']') {
						out.Packages = make([]Package, 0, 0)
					} else {
						out.Packages = []Package{}
					}
				} else {
					out.Packages = (out.Packages)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Package
					(v11).UnmarshalEasyJSON(in)
					out.Packages = append(out.Packages, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes14(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"XMLName\":"
		out.RawString(prefix[1:])
		easyjson6601e8cdEncodeEncodingXml(out, in.XMLName)
	}
	{
		const prefix string = ",\"Packages\":"
		out.RawString(prefix)
		if in.Packages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Packages {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes14(l, v)
}
func easyjson6601e8cdDecodeEncodingXml(in *jlexer.Lexer, out *xml.Name) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Space":
			out.Space = string(in.String())
		case "Local":
			out.Local = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodeEncodingXml(out *jwriter.Writer, in xml.Name) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Space\":"
		out.RawString(prefix[1:])
		out.String(string(in.Space))
	}
	{
		const prefix string = ",\"Local\":"
		out.RawString(prefix)
		out.String(string(in.Local))
	}
	out.RawByte('}')
}
func easyjson6601e8cdDecodePlusInternalTypes15(in *jlexer.Lexer, out *Memory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alloc_mb":
			out.AllocMB = uint64(in.Uint64())
		case "total_alloc_mb":
			out.TotalAllocMB = uint64(in.Uint64())
		case "sys_mb":
			out.SysMB = uint64(in.Uint64())
		case "gc_cycles":
			out.GCCycles = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes15(out *jwriter.Writer, in Memory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alloc_mb\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.AllocMB))
	}
	{
		const prefix string = ",\"total_alloc_mb\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.TotalAllocMB))
	}
	{
		const prefix string = ",\"sys_mb\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.SysMB))
	}
	{
		const prefix string = ",\"gc_cycles\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.GCCycles))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Memory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Memory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Memory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Memory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes15(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes16(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Href":
			out.Href = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes16(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Href\":"
		out.RawString(prefix[1:])
		out.String(string(in.Href))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes16(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes17(in *jlexer.Lexer, out *Checksum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Type":
			out.Type = string(in.String())
		case "Pkgid":
			out.Pkgid = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes17(out *jwriter.Writer, in Checksum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"Pkgid\":"
		out.RawString(prefix)
		out.String(string(in.Pkgid))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Checksum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Checksum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Checksum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Checksum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes17(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes18(in *jlexer.Lexer, out *Checks) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Storage":
			out.Storage = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes18(out *jwriter.Writer, in Checks) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Storage\":"
		out.RawString(prefix[1:])
		out.String(string(in.Storage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Checks) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Checks) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Checks) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Checks) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes18(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes19(in *jlexer.Lexer, out *BatchUploadResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "filename":
			out.Filename = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes19(out *jwriter.Writer, in BatchUploadResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"filename\":"
		out.RawString(prefix[1:])
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchUploadResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchUploadResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchUploadResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchUploadResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes19(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes20(in *jlexer.Lexer, out *BatchUploadResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "total":
			out.Total = int(in.Int())
		case "success":
			out.Success = int(in.Int())
		case "failed":
			out.Failed = int(in.Int())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]BatchUploadResult, 0, 1)
					} else {
						out.Results = []BatchUploadResult{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v14 BatchUploadResult
					(v14).UnmarshalEasyJSON(in)
					out.Results = append(out.Results, v14)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes20(out *jwriter.Writer, in BatchUploadResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix)
		out.Int(int(in.Total))
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Int(int(in.Success))
	}
	{
		const prefix string = ",\"failed\":"
		out.RawString(prefix)
		out.Int(int(in.Failed))
	}
	{
		const prefix string = ",\"results\":"
		out.RawString(prefix)
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.Results {
				if v15 > 0 {
					out.RawByte(',')
				}
				(v16).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchUploadResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchUploadResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchUploadResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchUploadResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes20(l, v)
}
func easyjson6601e8cdDecodePlusInternalTypes21(in *jlexer.Lexer, out *BatchUploadRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repository":
			out.Repository = string(in.String())
		case "auto_refresh":
			out.AutoRefresh = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6601e8cdEncodePlusInternalTypes21(out *jwriter.Writer, in BatchUploadRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix[1:])
		out.String(string(in.Repository))
	}
	{
		const prefix string = ",\"auto_refresh\":"
		out.RawString(prefix)
		out.Bool(bool(in.AutoRefresh))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BatchUploadRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6601e8cdEncodePlusInternalTypes21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BatchUploadRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6601e8cdEncodePlusInternalTypes21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BatchUploadRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6601e8cdDecodePlusInternalTypes21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BatchUploadRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6601e8cdDecodePlusInternalTypes21(l, v)
}
